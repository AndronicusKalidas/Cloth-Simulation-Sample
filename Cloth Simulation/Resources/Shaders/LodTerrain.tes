#version 430 core

layout (quads, equal_spacing, ccw) in;

out vec3 fragPos;
out vec3 fragNormal;
out vec4 fragPosLightSpace;

uniform mat4 PVM;
uniform mat4 LightPVM;
uniform mat4 model;

uniform sampler2D HeightMap;
uniform float Resolution;
uniform float Amplitude;

void main()
{
	vec2 p1 = mix(gl_in[1].gl_Position.xz, gl_in[0].gl_Position.xz, gl_TessCoord.x);
	vec2 p2 = mix(gl_in[2].gl_Position.xz, gl_in[3].gl_Position.xz, gl_TessCoord.x);
	vec2 pos = mix(p1, p2, gl_TessCoord.y);
		
	fragPos =  vec3(pos.x, texture(HeightMap, gl_TessCoord.xy).x * Amplitude, pos.y);
	gl_Position = PVM * vec4(fragPos, 1.0f);
	fragPosLightSpace = LightPVM * vec4(fragPos, 1.0f);
	fragPos = vec3(model * vec4(fragPos, 1.0f));

	// read neightbor heights using an arbitrary small offset
	float offLength = 0.01f;
	vec3 off = vec3(offLength, offLength, 0.0f);

	vec2 uv = (gl_TessCoord.xy - 0.5f) * 0.95f + 0.5f;

	float hL = texture(HeightMap, uv - off.xz).x;
	float hR = texture(HeightMap, uv + off.xz).x;
	float hD = texture(HeightMap, uv - off.zy).x;
	float hU = texture(HeightMap, uv + off.zy).x;

	// deduce terrain normal
	vec3 N = vec3(0.0f, 0.0f, 0.0f);
	
	N.x = hL - hR;
	N.y = 0.1;
	N.z = hD - hU;
	fragNormal = normalize(N);
}